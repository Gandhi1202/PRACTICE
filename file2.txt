
PRACTICE THESE QUESTIONS FOR BETTER UNDERSTANDING ON PROBLEM SOLVING

1. Create a function that checks if a given string is a palindrome (reads the same forwards and backwards). Ignore spaces and punctuation.

2. Write a method that takes two strings and checks if they are anagrams of each other (e.g., "listen" and "silent").

3. Write a method that takes an array of integers and returns the largest element. Handle cases where the array might be empty.

4.Implement a function that merges two sorted arrays into a single sorted array.

5. Write a recursive method to compute the factorial of a given non-negative integer.

6. Create a method that counts the number of vowels and consonants in a given string.

7. Write a method that reverses a given string without using built-in reverse methods.

8. Implement a method to find and return duplicate elements in an array of integers.

9. Create a method that checks if a given number is prime.

10. Write a method that counts the number of words in a given string. A word is defined as any sequence of characters separated by whitespace.

11. Write a method that compresses a string using the counts of repeated characters (e.g., "aabcccccaaa" becomes "a2b1c5a3").

12. Create a method that finds the first non-repeating character in a string. Use a Map to track character frequencies.

13. Write a method that takes two lists of integers and returns a Set<Integer> containing the intersection of the two lists.

14. Create a method that takes a List<Integer> and removes duplicates using a Set, then returns the modified list.

15. Given a list of integers, write a method that returns a Set<Integer> containing only the unique elements from the list.


--------------------------------------------------------------------------------------

TRY TO SOLVE THE PROBLEMS WITHOUT LOOKING AT SOLUTIONS.

Consider edge cases in your implementations.

If possible, write unit tests for your methods to ensure correctness.

--------------------------------------------------------------------------------------

Do these Java 8 based problems while learnign those concepts


1. Stream Filtering
Question: Given a list of integers, use streams to filter out the even numbers and collect the results into a new list.

Concepts: Streams, filter, collect.

2. Map and Reduce
Question: Write a method that takes a list of strings and returns the total length of all strings combined using streams.

Concepts: Map, reduce, stream operations.

3. Optional Handling
Question: Create a method that takes an Optional<String> and returns the string if present; otherwise, it returns "Default Value".

Concepts: Optional, isPresent, orElse.

4. GroupingBy
Question: Given a list of people (with name and age), group them by age and return a map where the key is the age and the value is a list of names.

Concepts: Streams, Collectors.groupingBy.

5. FlatMap
Question: Given a list of lists of integers, flatten them into a single list using streams.

Concepts: FlatMap, stream flattening.

6. Finding Max/Min
Question: Write a method that finds the longest string in a list of strings using streams.

Concepts: Stream operations, max, Comparator.

7. Distinct Elements
Question: Given a list of integers, return a list of distinct elements while preserving the original order.

Concepts: Stream distinct, LinkedHashSet for order preservation.

8. ForEach with Consumer
Question: Iterate through a list of integers and print each one using a forEach method with a lambda expression.

Concepts: forEach, Consumer, lambda expressions.

9. Find First
Question: Given a list of employees, find the first employee whose age is greater than 30 using streams.

Concepts: Stream filter, findFirst.

10. Collecting Results
Question: Write a method that collects the names of all employees into a single string separated by commas.

Concepts: Collectors.joining, stream.
